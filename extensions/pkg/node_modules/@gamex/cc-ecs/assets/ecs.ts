import { Node } from 'cc';
import { DEV, EDITOR } from 'cc/env';
import { EcsComponent } from './ecs/EcsComponent';
import { EcsSystem } from './ecs/EcsSystem';
import { entityCache } from './lib/EcsCache';
import { Filter } from './lib/EcsFilter';
import { ComponentManager, EntityManager, SystemManager, classManager } from './lib/EcsManager';
import { EcsBase, EcsBaseEntity, EcsBaseSystem, IComponent, IComponentName, IECS, IEntity, IEntityUUID, IFilter, ISingleton, ITypeofComponent, ITypeofEntity, ITypeofSingleton, ITypeofSystem } from './lib/EcsObject';

/**
 * 根据名获取类，用于通过组件名字获取组件类
 */
export function getClassByName(name: IComponentName) {
    return classManager.getClassByName(name);
}

/**
 * 过滤条件
 */
export const filter: IFilter = {
    all(...comps: ITypeofComponent[]) {
        return new Filter().all(...comps);
    },
    any(...comps: ITypeofComponent[]) {
        return new Filter().any(...comps);
    },
    only(...comps: ITypeofComponent[]) {
        return new Filter().only(...comps);
    },
    exclude(...comps: ITypeofComponent[]) {
        return new Filter().exclude(...comps);
    }
};

export class ECS implements IECS {
    static create(): IECS {
        return new ECS();
    }

    private entityManager = new EntityManager();
    private systemManager = new SystemManager();
    private componentManager = new ComponentManager();
    private singletons: ISingleton[] = [];

    /**
     * 查询实体
     */
    public query<T extends IEntity>(filter: Filter): T[];
    public query<T extends IComponent>(filter: Filter, Comment: { new(): T }): T[];
    public query<T>(filter: Filter, Comment?: ITypeofComponent): T[] {
        const entities = Filter.query(this.entityManager, this.componentManager, filter);
        if (!Comment) return entities as T[];
        return entities.map(entity => entity.get(Comment)) as T[];
    }

    /**
     * 查询实体
     */
    public find<T extends IEntity>(filter: Filter): T;
    public find<T extends IComponent>(filter: Filter, Comment: { new(): T }): T;
    public find<T>(filter: Filter, Comment?: ITypeofComponent): T {
        const entity = Filter.find(this.entityManager, this.componentManager, filter);
        if (!entity) return null;
        if (!Comment) return entity as T;
        return entity.get(Comment) as T;
    }

    /**
     * 查询实体是否存在
     */
    public exist(filter: Filter) {
        return !!Filter.find(this.entityManager, this.componentManager, filter);
    }

    /**
     * 根据uuid查询实体
     */
    public findByUuid(uuid: IEntityUUID) {
        return this.entityManager.get(uuid);
    }

    /**
     * 根据uuid查询实体是否存在
     */
    public existByUuid(uuid: IEntityUUID) {
        return !!this.entityManager.has(uuid);
    }

    /**
     * 添加单例组件
     */
    public addSingleton<T extends ITypeofSingleton>(param: T): InstanceType<T>;
    public addSingleton<T extends ISingleton>(param: T): T;
    public addSingleton(param: ITypeofSingleton | ISingleton) {
        if (DEV && param.ecsName === 'EcsBase') {
            console.error('请使用ecsclass修饰', param);
            return null;
        }
        const com = this.singletons.find(com => com.ecsName === param.ecsName);
        if (com) return com;

        if (param instanceof EcsBase) {
            this.singletons.push(param);
            return param;
        } else {
            const com = new param();
            this.singletons.push(com);
            return com;
        }
    }

    /**
     * 获取单例组件
     */
    public getSingleton<T extends ITypeofSingleton>(param: T): InstanceType<T> {
        return this.singletons.find(com => com.ecsName === param.ecsName) as InstanceType<T>;
    }

    /**
     * 移除单例组件
     */
    public removeSingleton<T extends ITypeofSingleton>(param: T): InstanceType<T> {
        const index = this.singletons.findIndex(com => com.ecsName === param.ecsName);
        if (index >= 0) {
            return this.singletons.splice(index, 1)[0] as InstanceType<T>;
        }
        return null;
    }

    /**
     * 创建一个实体
     */
    public createEntity<T extends ITypeofEntity>(Entity: T, options?: Node | { node?: Node }): InstanceType<T> {
        const entity = entityCache.get() || new Entity();
        EcsBaseEntity.init(entity, this, Node.isNode(options) ? options : options?.node);
        this.entityManager.add(entity);
        return entity as InstanceType<T>;
    }

    /**
     * 移除一个实体
     */
    public removeEntity(entity: IEntity) {
        this.entityManager.remove(entity);
        if (entity.allowRecycling) {
            EcsBaseEntity.updateUUID(entity);
            entityCache.put(entity);
        }
    }

    /**
     * 添加一个组件
     */
    public addComponent(entity: IEntity, component: IComponent) {
        // 先添加组件
        EcsBaseEntity.addComponent(entity, component);
        this.componentManager.addComponent(component.ecsName, component);

        // 再触发系统的监听
        this.systemManager.each(function (system) {
            EcsSystem.matchEntity(system as EcsSystem, entity);
        });
    }

    /**
     * 移除一个组件
     */
    public removeComponent(component: IComponent) {
        const entity = component.entity;
        const componentName = component.ecsName;

        // 先触发系统的监听
        EcsComponent.beforeRemove(component as EcsComponent);
        this.systemManager.each(function (system) {
            EcsSystem.matchEntity(system as EcsSystem, entity);
        });

        // 再移除组件
        EcsBaseEntity.removeComponent(entity, component);
        this.componentManager.removeComponent(componentName, component);
    }

    /**
    * 添加一个系统
    */
    public addSystem<T extends ITypeofSystem>(System: T): void {
        const system = new System(this);
        this.systemManager.add(system);
        EcsBaseSystem.onAdd(system);
    }

    /**
     * 移除一个系统
     */
    public removeSystem<T extends ITypeofSystem>(System: T): void {
        const system = this.systemManager.remove(System);
        if (system) EcsBaseSystem.onRemove(system);
    }

    /**
     * 清理所有数据
     */
    public clear() {
        this.systemManager.clear();
        this.entityManager.clear();
        this.componentManager.clear();
        this.singletons.length = 0;
    }

    private executeSystem(dt: number, args: any[]) {
        this.systemManager.each(function (system) {
            EcsBaseSystem.execute(system, dt, args);
        });
    }
    private beforeExecuteSystem(dt: number, args: any[]) {
        this.systemManager.each(function (system) {
            EcsBaseSystem.beforeExecute(system, dt, args);
        });
    }
    private afterExecuteSystem(dt: number, args: any[]) {
        this.systemManager.each(function (system) {
            EcsBaseSystem.afterExecute(system, dt, args);
        });
    }

    private updateSystem(dt: number, args: any[]) {
        this.systemManager.each(function (system) {
            EcsBaseSystem.update(system, dt, args);
        });
    }
    private beforeUpdateSystem(dt: number, args: any[]) {
        this.systemManager.each(function (system) {
            EcsBaseSystem.beforeUpdate(system, dt, args);
        });
    }
    private afterUpdateSystem(dt: number, args: any[]) {
        this.systemManager.each(function (system) {
            EcsBaseSystem.afterUpdate(system, dt, args);
        });
    }

    /**
     * 用于逻辑帧
     * 执行顺序:
     * [系统的beforeExecute] -> [系统的execute] ->[系统的afterExecute]
     */
    public execute(dt: number, ...args: any[]) {
        this.beforeExecuteSystem(dt, args);
        this.executeSystem(dt, args);
        this.afterExecuteSystem(dt, args);
    }

    /**
     * 用于渲染帧
     * 执行顺序:
     * [系统的beforeUpdate] -> [系统的update] -> [系统的afterUpdate]
     */
    public update(dt: number, ...args: any[]) {
        this.beforeUpdateSystem(dt, args);
        this.updateSystem(dt, args);
        this.afterUpdateSystem(dt, args);
    }
}

export const ecs = ECS.create();

if (DEV && !EDITOR) {
    //@ts-ignore
    window['ecs'] = ecs;
}