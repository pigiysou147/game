import { error, Node } from 'cc';
import { DEV } from 'cc/env';
import { ECS } from '../ecs';
import { componentCache } from '../lib/EcsCache';
import { classManager, flagManager } from '../lib/EcsManager';
import { EcsBaseComponent, EcsBaseEntity, IComponent, IComponentName, IECS, IEntity, ITypeofComponent } from '../lib/EcsObject';
import { ArrayMap } from '../lib/EcsUtils';
import { EcsComponent } from './EcsComponent';

export class EcsEntity extends EcsBaseEntity implements IEntity {
    /**位运算 */
    private flag: number[] = new Array(flagManager.bits).fill(0);

    private instNames: string[] = [];

    /**组件的名字 => 组件数组 */
    private instNameToComps: ArrayMap<IComponentName, IComponent> = new ArrayMap();

    /**组件父类的名字 => 组件数组 */
    private superNameToComps: ArrayMap<IComponentName, IComponent> = new ArrayMap();

    private _isValid = false;
    /**是否有效 */
    public get isValid() {
        return this._isValid;
    }
    private set isValid(value) {
        this._isValid = value;
    }

    private _enabled = true;
    /**标记是否生效 */
    public get enabled() {
        return this._enabled;
    }
    public set enabled(value) {
        if (this._enabled === value) return;
        this._enabled = value;
        if (value) {
            this.onEnable();
        } else {
            this.onDisable();
        }
        // 更新组件状态
        this.instNameToComps.forEach((comps) => {
            for (let index = 0; index < comps.length; index++) {
                EcsComponent.updateEnable(comps[index] as EcsComponent);
            }
        });
    }

    /**指定ecs */
    private _ecs: ECS = null;
    /**获取对应的ecs */
    protected get ecs() {
        return this._ecs as IECS;
    }

    /**节点 */
    private _node: Node | null = null;
    public get node() {
        return this._node;
    }
    public set node(value: Node | null) {
        this._node = value;
    }

    /**标记是否已经销毁 */
    private _isDestroyed = true;

    /**
     * 内部初始化函数
     */
    protected innerInit(ecs: ECS, node: Node | null = null) {
        this._ecs = ecs;
        this._node = node;
        this._isValid = true;
        this._enabled = true;
        this._isDestroyed = false;
        this.onAdd();
        this._enabled && this.onEnable();
    }

    /**
     * 添加组件(内部调用)
     */
    protected innerAddComponent(com: EcsComponent) {
        // 组件类名字
        const componentName = com.ecsName;

        // 添加父类名字到uuid的转换
        classManager.eachSuperName(componentName, (superName) => {
            this.superNameToComps.add(superName, com);
        });

        // 添加名字到uuid的转换
        const len = this.instNameToComps.add(componentName, com);

        if (len === 1) {
            // 记录组件实例的名字
            this.instNames.push(componentName);
            // 更新标记位
            flagManager.addFlag(this.flag, flagManager.getAllByName(componentName));
        }

        EcsComponent.onAdd(com, this);
    }

    /**
     * 移除组件(内部调用)
     */
    protected innerRemoveComponent(com: EcsComponent) {
        // 组件类名字
        const componentName = com.ecsName;

        // 删除父类名字到uuid的转换
        classManager.eachSuperName(componentName, (superName) => {
            this.superNameToComps.sub(superName, com);
        });

        // 删除名字到uuid的转换
        const del = this.instNameToComps.subDel(componentName, com);

        if (del) {
            const index = this.instNames.indexOf(componentName);
            this.instNames.splice(index, 1);
            // 更新标记位
            flagManager.getAllByNames(this.instNames, this.flag);
        }

        EcsComponent.onRemove(com);
    }

    /**
     * 根据组件名字获取对应的组件数组(先查inst再查询super)
     */
    private getCompsByName(componentName: string): readonly IComponent<IEntity>[] {
        const instComps = this.instNameToComps.get(componentName);
        if (instComps && instComps.length) {
            return instComps;
        }

        const superComps = this.superNameToComps.get(componentName);
        if (superComps && superComps.length) {
            return superComps;
        }

        return null;
    }

    /**
     * 根据组件名字获取对应的组件数组(先查inst再查询super)
     */
    private getCompsByName2(componentName: string) {
        const out: IComponent[] = [];
        const instComps = this.instNameToComps.get(componentName);
        if (instComps && instComps.length) {
            Array.prototype.push.apply(out, instComps);
        }

        const superComps = this.superNameToComps.get(componentName);
        if (superComps && superComps.length) {
            Array.prototype.push.apply(out, superComps);
        }

        return out;
    }

    /**
     * 移除当前所有组件
     */
    private clear() {
        const keys = this.instNames;

        for (let index = keys.length - 1; index >= 0; index--) {
            const comps = this.instNameToComps.get(keys[index]);
            if (!comps) continue;// 如果在某个组件的onRemove中主动移除其它组件，这个会是null
            for (let index = comps.length - 1; index >= 0; index--) {
                this.removeComponent(comps[index]);
            }
        }

        this.flag.fill(0);
        this.instNames.length = 0;
        this.instNameToComps.clear();
        this.superNameToComps.clear();
    }

    /**
     * 销毁
     */
    public destroy() {
        if (this._isDestroyed) return false;
        this._isDestroyed = true;

        this.enabled && this.onDisable();
        this.onRemove();
        this.clear();
        this._node = null;
        this._isValid = false;
        this._ecs.removeEntity(this);
        this._ecs = null;
        return true;
    }

    /**添加*/
    protected onAdd() { }
    /**生效*/
    protected onEnable() { }
    /**失效*/
    protected onDisable() { }
    /**移除*/
    protected onRemove() { }

    /**
     * 检查是否包含全部
     */
    checkFlagAll(flag: number[]) {
        return flagManager.checkFlagAll(this.flag, flag);

    }
    /**
     * 检查是否包含任一
     */
    checkFlagAny(flag: number[]) {
        return flagManager.checkFlagAny(this.flag, flag);
    }

    /**
     * 检查是否仅包含全部
     */
    checkFlagOnly(flag: number[]) {
        const componentNames = this.instNames;
        for (let index = 0; index < componentNames.length; index++) {
            const componentName = componentNames[index];
            const comFlag = flagManager.getAllByName(componentName);
            const success = flagManager.checkFlagAny(comFlag, flag);
            if (!success) {
                return false;
            }
        }
        return true;
    }

    /**
     * 添加相应类型的组件
     * @see 同add
     * @param param 类型
     */
    addComponent<T extends ITypeofComponent>(param: T | IComponent): InstanceType<T> {
        return this.add(param);
    }

    /**
     * 添加相应类型的组件
     * @param param 类型
     */
    add<T extends ITypeofComponent>(param: T | IComponent): InstanceType<T> {
        if (DEV && param.ecsName === EcsComponent.ecsName) {
            console.error('请使用ecsclass修饰Component', param);
            return null;
        }

        // 是实例
        if (param instanceof EcsBaseComponent) {
            if (param.entity) {
                error(`不可以添加其它实体的组件\nuuid:    ${param.uuid}\n组件名:   ${param.ecsName}`);
                return null;
            } else if (param.entity === this) {
                error(`不可重复添加同一个组件实例\nuuid:    ${param.uuid}\n组件名:   ${param.ecsName}`);
                return null;
            }
            this._ecs.addComponent(this, param);
            return param as InstanceType<T>;
        } else {
            // 如果不允许重复添加
            if (!param.allowMultiple) {
                const comps = this.instNameToComps.get(param.ecsName);
                if (comps && comps.length) {
                    return comps[0] as InstanceType<T>;
                }
            }
            const com = componentCache.get(param.ecsName) || new param();
            this._ecs.addComponent(this, com);
            return com as InstanceType<T>;
        }
    }

    /**
     * 移除相应类型的第一个组件
     * @see 同remove
     * @param param 类型
     */
    removeComponent(param: ITypeofComponent | IComponent): boolean {
        return this.remove(param);
    }

    /**
     * 移除相应类型的第一个组件
     * @param param 类型
     */
    remove(param: ITypeofComponent | IComponent): boolean {
        if (!param) return false;

        if (param instanceof EcsBaseComponent) {
            if (param.entity !== this) {
                error(`移除的组件不属于当前实体\n组件名:   ${param.ecsName}`);
                return false;
            }
            this._ecs.removeComponent(param);
            if (param.allowRecycling) {
                EcsBaseComponent.updateUUID(param);
                componentCache.put(param.ecsName, param);
            }
            return true;
        } else {
            const com = this.get(param);
            if (!com) {
                error(`移除的组件不属于当前实体\n组件名:   ${param.ecsName}`);
                return false;
            }
            this._ecs.removeComponent(com);
            if (param.allowRecycling) {
                EcsBaseComponent.updateUUID(com);
                componentCache.put(param.ecsName, com);
            }
            return true;
        }
    }

    /**
     * 移除相应组件的所有组件
     * @see 同removeAll
     * @param Com 类型
     */
    removeComponents(Com: ITypeofComponent): boolean {
        return this.removeAll(Com);
    }

    /**
     * 移除相应组件的所有组件
     * @param Com 类型
     */
    removeAll(Com: ITypeofComponent): boolean {
        const comps = this.getAll(Com);
        if (!comps.length) return false;

        return comps.every((com) => {
            return this.remove(com);
        });
    }

    /**
     * 有没有相应类型的组件
     * @see 同has
     * @param Com 类型
     */
    hasComponent(Com: ITypeofComponent): boolean {
        return this.has(Com);
    }

    /**
     * 有没有相应类型的组件
     * @param Com 类型
     */
    has(Com: ITypeofComponent): boolean {
        const comps = this.getCompsByName(Com.ecsName);
        if (!comps || comps.length === 0) return false;
        return true;
    }

    /**
     * 获取相应类型的组件
     * @see 同get
     * @param Com 类型
     */
    getComponent<T extends ITypeofComponent>(Com: T): InstanceType<T> {
        return this.get(Com);
    }

    /**
     * 获取相应类型的组件
     * @param Com 类型
     */
    get<T extends ITypeofComponent>(Com: T): InstanceType<T> {
        const comps = this.getCompsByName(Com.ecsName);
        if (!comps || comps.length === 0) return null;
        return comps[0] as InstanceType<T>;
    }

    /**
     * 获取相应类型的组件
     * @see 同getAll
     * @param Com 类型
     */
    getComponents<T extends ITypeofComponent>(Com: T): InstanceType<T>[] {
        return this.getAll(Com);
    }

    /**
     * 获取相应类型的组件
     * @param Com 类型
     */
    getAll<T extends ITypeofComponent>(Com: T): InstanceType<T>[] {
        return this.getCompsByName2(Com.ecsName) as InstanceType<T>[];
    }
}
