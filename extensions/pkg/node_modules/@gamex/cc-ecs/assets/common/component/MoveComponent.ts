import { math, Vec2 } from 'cc';
import { EcsComponent } from '../../ecs/EcsComponent';
import { ecsclass } from '../../lib/EcsManager';
import { IEntity } from '../../lib/EcsObject';
import { NodeComponent } from './NodeComponent';

interface IOptions {
    /**
     * 允许旋转
     * - 当rotate为true时，angle属性才会同步到NodeComponent
     * @description 默认值: false
     */
    rotate: boolean;
    /**
     * 最小速度
     * @description 单位: 像素/秒
     * @description 默认值: -Infinity
     * @description 取值范围: (-oo, +oo)
     */
    minSpeed: number;
    /**
     * 最大速度
     * @description 单位: 像素/秒
     * @description 默认值: Infinity
     * @description 取值范围: (-oo, +oo)
     */
    maxSpeed: number;
    /**
     * 加速度
     * @description 单位: 像素/秒
     * @description 默认值: 0
     * @description 取值范围: (-oo, +oo)
     */
    acceleratedVelocity: number;
    /**
     * 角速度(0表示无穷大)
     * @description 单位: 度/秒
     * @description 默认值: 0
     * @description 取值范围: [0, +oo)
     */
    angleVelocity: number;
}

export interface IMoveComponent {
    /**
     * 选项参数
     */
    options: IOptions;
    /**
     * 最终的目标
     * - taget与toward二选一, 且必须设置一个
     * @description 默认值: null
     */
    target: NodeComponent;
    /**
     * 最终的角度
     * - taget与toward二选一, 且必须设置一个
     * @description 单位: 度
     * @description 默认值: 0
     * @description 取值范围: (-180, 180]
     */
    toward: number;
    /**
     * 当前速度
     * @description 单位: 像素/秒
     * @description 默认值: 0
     * @description 取值范围: (-oo, +oo)
     */
    speed: number;
    /**
     * 当前角度
     * @description 单位: 度
     * @description 默认值: 0
     * @description 取值范围: (-180, 180]
     */
    angle: number;
    /**
     * 总移动距离
     * @description 单位: 像素
     * @description 默认值: 0
     * @description 取值范围: [0, +oo)
     */
    distance: number;
}

/**
 * 移动方向(只给出了常用的方向)
 * @description 单位: 度
 * @description 取值范围: (-180, 180]
 */
export enum MoveTowardType {
    Right = 0,
    RightUp = 45,
    Up = 90,
    LeftUp = 135,
    Left = 180,
    LeftDown = -135,
    Down = -90,
    RightDown = -45
}

@ecsclass('EcsMoveComponent')
export class MoveComponent<T extends IEntity = IEntity> extends EcsComponent<T> implements IMoveComponent {
    static allowRecycling: boolean = true;

    protected onRemove() {
        this.reset();
    }

    public reset() {
        this._target = null;
        this._toward = null;
        this._targetUUID = null;
        this._angle = null;
        this._speed = 0;
        this._distance = 0;
        this._options.rotate = false;
        this._options.minSpeed = -Infinity;
        this._options.maxSpeed = Infinity;
        this._options.acceleratedVelocity = 0;
        this._options.angleVelocity = 0;
    }

    private _options: IOptions = {
        rotate: false,
        minSpeed: -Infinity,
        maxSpeed: Infinity,
        acceleratedVelocity: 0,
        angleVelocity: 0,
    };
    public get options(): IOptions {
        return this._options;
    }
    public set options(value: IOptions) {
        this._options = value;
    }

    // 总移动距离
    private _distance = 0;
    public get distance() {
        return this._distance;
    }
    private set distance(value) {
        this._distance = value;
    }

    // 最终目标
    private _targetUUID: number = null;
    private _target: NodeComponent = null;
    public get target(): NodeComponent {
        if (this._target && this._target.uuid !== this._targetUUID) {
            this._target = null;
        }
        return this._target;
    }
    public set target(value: NodeComponent) {
        this._target = (value && value.isValid) ? value : null;
        if (this._target) {
            this._targetUUID = this._target.uuid;
        } else {
            this._targetUUID = null;
        }
    }

    // 最终朝向
    private _toward: number = null;
    public get toward(): number {
        return this._toward;
    }
    public set toward(value: number) {
        this._toward = MoveComponent.getAngleFromNeg180to180(value);
    }

    // 当前角度
    private _angle: number = 0;
    public get angle() {
        return this._angle;
    }
    public set angle(value) {
        this._angle = MoveComponent.getAngleFromNeg180to180(value);
    }

    // 当前速度
    private _speed: number = 0;
    public get speed(): number {
        if (this._speed < this.options.minSpeed) {
            this._speed = this.options.minSpeed;
        } else if (this._speed > this.options.maxSpeed) {
            this._speed = this.options.maxSpeed;
        }
        return this._speed;
    }
    public set speed(value: number) {
        if (value < this.options.minSpeed) {
            value = this.options.minSpeed;
        } else if (value > this.options.maxSpeed) {
            value = this.options.maxSpeed;
        }
        this._speed = value;
    }

    /**
     * 获取self朝向other的角度
     */
    static getTowardAngle(self: NodeComponent, other: NodeComponent) {
        if (!self) return 0;
        if (!other) return 0;
        return math.toDegree(Math.atan2(other.y - self.y,
            other.x - self.x));
    }

    /**
     * 修正到(-180, 180]
     */
    static getAngleFromNeg180to180(angle: number) {
        if (angle >= 360 || angle <= -360) {
            angle = angle % 360;
        }
        if (angle > 180) {
            angle -= 360;
        } else if (angle <= -180) {
            angle += 360;
        }
        return angle;
    }

    /**
     * 修正到[0, 360)
     */
    static getAngleFrom0To360(angle: number) {
        if (angle >= 360 || angle <= -360) {
            angle = angle % 360;
        }
        if (angle < 0) {
            angle += 360;
        }
        return angle;
    }

    /**
     * 修正到(-360, 0]
     */
    static getAngleFromNeg360To0(angle: number) {
        if (angle >= 360 || angle <= -360) {
            angle = angle % 360;
        }
        if (angle > 0) {
            angle -= 360;
        }
        return angle;
    }

    /**
     * 根据速度二维分量获取toward值
     */
    static getTowardByVelocity(velocity: Vec2) {
        // y速度为0
        if (velocity.y === 0) {
            if (velocity.x >= 0) {
                return MoveTowardType.Right;
            } else {
                return MoveTowardType.Left;
            }
        }
        // x速度为0
        if (velocity.x === 0) {
            if (velocity.y >= 0) {
                return MoveTowardType.Up;
            } else {
                return MoveTowardType.Down;
            }
        }
        // x、y速度相等
        if (velocity.x === velocity.y) {
            if (velocity.x >= 0) {
                return MoveTowardType.RightDown;
            } else {
                return MoveTowardType.LeftDown;
            }
        }
        // x、y速度相反
        if (velocity.x === -velocity.y) {
            if (velocity.x >= 0) {
                return MoveTowardType.RightUp;
            } else {
                return MoveTowardType.LeftUp;
            }
        }

        return Vec2.UNIT_X.signAngle(velocity);
    }
}