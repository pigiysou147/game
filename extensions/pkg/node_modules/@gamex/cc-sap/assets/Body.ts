import { EventTarget, Rect } from 'cc';

/**
 * 永远产生正整数(不含0)
 */
class UUID {
    private static value = 0;
    public static create() {
        if (++this.value > 1E10) {
            this.value = 1;
        }
        return this.value;
    }
}

export interface IBox {
    /** x最小值 */
    x: number
    /** y最小值 */
    y: number
    /** z最小值 */
    z?: number
    /** 宽度 */
    width: number
    /** 高度 */
    height: number
    /** 深度 */
    depth?: number
}

export interface IAABB {
    /**最小点坐标 */
    min: {
        x: number
        y: number
        z?: number
    }
    /**最大点坐标 */
    max: {
        x: number
        y: number
        z?: number
    }
}

export interface IBody<T = unknown> {
    readonly width: number;
    readonly height: number;
    readonly depth: number;

    readonly xMin: number;
    readonly yMin: number;
    readonly zMin: number;

    readonly xMid: number;
    readonly yMid: number;
    readonly zMid: number;

    readonly xMax: number;
    readonly yMax: number;
    readonly zMax: number;

    data: T;
}

export enum BodyEvent {
    AABB_CHANGED
}

export class Body<T = unknown> {
    /**
     * @private
     * @inner
     */
    static emit(body: Body, type: BodyEvent, arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any) {
        body.event.emit(type, arg0, arg1, arg2, arg3, arg4);
    }

    /**
     * @private
     * @inner
     */
    static on(body: Body, type: BodyEvent, listener: (body?: Body) => void, target?: unknown) {
        body.event.on(type, listener, target);
    }

    /**
     * @private
     * @inner
     */
    static once(body: Body, type: BodyEvent, listener: (body?: Body) => void, target?: unknown) {
        body.event.once(type, listener, target);
    }

    /**
     * @private
     * @inner
     */
    static off(body: Body, type: BodyEvent, listener: (body?: Body) => void, target?: unknown) {
        body.event.off(type, listener, target);
    }

    /**
     * @private
     * @inner
     */
    static targetOff(body: Body, target: unknown) {
        body.event.targetOff(target);
    }

    private _xMin: number = 0;
    public get xMin(): number {
        return this._xMin;
    }
    private _yMin: number = 0;
    public get yMin(): number {
        return this._yMin;
    }
    private _zMin: number = 0;
    public get zMin(): number {
        return this._zMin;
    }

    private _xMid: number = 0;
    public get xMid(): number {
        return this._xMid;
    }
    private _yMid: number = 0;
    public get yMid(): number {
        return this._yMid;
    }
    private _zMid: number = 0;
    public get zMid(): number {
        return this._zMid;
    }

    private _xMax: number = 0;
    public get xMax(): number {
        return this._xMax;
    }
    private _yMax: number = 0;
    public get yMax(): number {
        return this._yMax;
    }
    private _zMax: number = 0;
    public get zMax(): number {
        return this._zMax;
    }

    private _width: number = 0;
    public get width(): number {
        return this._width;
    }
    private _height: number = 0;
    public get height(): number {
        return this._height;
    }
    private _depth: number = 0;
    public get depth(): number {
        return this._depth;
    }

    /**唯一ID */
    public id: number = 0;

    /**碰撞分组 */
    public group: number = 1;

    /**碰撞掩码 */
    public mask: number = 1;

    /**数据 */
    public data: T = undefined;

    /**事件 */
    private event = new EventTarget();

    constructor(id?: number) {
        if (typeof id === 'number') {
            this.id = id;
        } else {
            this.id = UUID.create();
        }
    }

    /**唯一ID */
    public setID(id: number) {
        this.id = id;
        return this;
    }

    /**碰撞分组 */
    public setGroup(group: number) {
        this.group = group;
        return this;
    }

    /**碰撞掩码 */
    public setMask(mask: number) {
        this.mask = mask;
        return this;
    }

    /**数据 */
    public setData(data: T) {
        this.data = data;
        return this;
    }

    /**设置Body包围盒数据 */
    public setRect(value: Rect) {
        if (!value) return this;

        this._xMin = value.xMin;
        this._yMin = value.yMin;
        this._zMin = 0;

        this._xMax = value.xMax;
        this._yMax = value.yMax;
        this._zMax = 0;

        this._xMid = value.center.x;
        this._yMid = value.center.y;
        this._zMid = 0;

        this._width = value.width;
        this._height = value.height;
        this._depth = 0;

        this.event.emit(BodyEvent.AABB_CHANGED, this);
        return this;
    }

    /**设置Body包围盒数据 */
    public setBox(value: IBox) {
        if (!value) return this;

        this._xMin = value.x;
        this._yMin = value.y;
        this._zMin = value.z || 0;
        this._width = value.width;
        this._height = value.height;
        this._depth = value.depth || 0;

        this._xMax = this._xMin + this._width;
        this._yMax = this._yMin + this._height;
        this._zMax = this._zMin + this._depth;

        this._xMid = this._xMin + this._width / 2;
        this._yMid = this._yMin + this._height / 2;
        this._zMid = this._zMin + this._depth / 2;

        this.event.emit(BodyEvent.AABB_CHANGED, this);
        return this;
    }

    /**设置Body包围盒数据 */
    public setAABB(value: IAABB) {
        if (!value) return this;

        const min = value.min;
        const max = value.max;

        this._xMin = min.x;
        this._yMin = min.y;
        this._zMin = min.z || 0;
        this._xMax = max.x;
        this._yMax = max.y;
        this._zMax = max.z || 0;

        this._width = this._xMax - this._xMin;
        this._height = this._yMax - this._yMin;
        this._depth = this._zMax - this._zMin;

        this._xMid = this._xMin + this._width / 2;
        this._yMid = this._yMin + this._height / 2;
        this._zMid = this._zMin + this.depth / 2;

        this.event.emit(BodyEvent.AABB_CHANGED, this);
        return this;
    }

    /**
     * 测试是否相交
     */
    public intersect(otehr: Body): boolean {
        if (!(this.group & otehr.mask && otehr.group & this.mask)) {
            return false;
        }
        if (this.xMin > otehr.xMax ||
            this.xMax < otehr.xMin ||
            this.yMin > otehr.yMax ||
            this.yMax < otehr.yMin ||
            this.zMin > otehr.zMax ||
            this.zMax < otehr.zMin) {
            return false;
        }
        return true;
    }
}