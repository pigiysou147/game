
import { ecsclass } from '../lib/EcsManager';
import { EcsBaseComponent, IComponent, IEntity } from '../lib/EcsObject';

@ecsclass('EcsComponent')
export class EcsComponent<E extends IEntity = IEntity> extends EcsBaseComponent implements IComponent {
    /**内部函数 */
    static updateEnable(comp: EcsComponent) {
        comp.updateEnable();
    }

    /**内部函数 */
    static beforeRemove(comp: EcsComponent) {
        return comp.innerBeforeRemove();
    }

    /**内部函数 */
    static onAdd(comp: EcsComponent, entity: IEntity) {
        return comp.innerAdd(entity);
    }

    /**内部函数 */
    static onRemove(comp: EcsComponent) {
        return comp.innerRemove();
    }

    /**正在初始化中 */
    private _initing = false;
    /**正在移除中 */
    private _removing = false;

    /**是否有效 */
    private _isValid = false;
    public get isValid() {
        return this._isValid;
    }
    private set isValid(value) {
        this._isValid = value;
    }

    public get isStrictValid() {
        return this._isValid && !this._removing;
    }

    /**是否生效 */
    private _enabled = false;
    public get enabled() {
        return this._enabled;
    }
    public set enabled(value) {
        if (this._enabled === value) return;
        this._enabled = value;
        if (this._initing) return;
        if (this._removing) return;
        this.updateEnable();
    }

    /**当前组件所在的实体 */
    private _entity: E = null;
    public get entity() {
        return this._entity;
    }
    private set entity(value) {
        this._entity = value;
    }

    /**表示该组件是否被启用并且所在的实体也处于启用状态(为false代表不会被查询到) */
    public get enabledInHierarchy() {
        if (!this._enabled) return false;
        if (!this._entity) return false;
        if (!this._entity.enabled) return false;
        return true;
    }

    private __enabled = false;
    private updateEnable() {
        const enabledInHierarchy = this.enabledInHierarchy;
        if (this.__enabled === enabledInHierarchy) return;
        this.__enabled = enabledInHierarchy;
        if (enabledInHierarchy) {
            this.onEnable();
        } else {
            this.onDisable();
        }
    }

    /**
     * 组件被添加(内部调用)
     */
    private innerAdd(entity: E) {
        this._initing = true;
        this._removing = false;
        this._isValid = true;
        this._enabled = true;
        this.__enabled = false;
        this._entity = entity;
        this.onAdd();
        this._initing = false;
        this.__enabled = this.enabledInHierarchy;
        this.__enabled && this.onEnable();
    }

    /**
     * 组件被移除前(内部调用)
     */
    private innerBeforeRemove() {
        this._removing = true;
    }

    /**
     * 组件被移除(内部调用)
     */
    private innerRemove() {
        this.__enabled && this.onDisable();
        this.onRemove();
        this._removing = false;
        this._isValid = false;
        this._enabled = false;
        this.__enabled = false;
        this._entity = null;
    }

    protected onAdd() { }
    protected onEnable() { }
    protected onDisable() { }
    protected onRemove() { }

    public destroy(): boolean {
        if (!this.entity) return false;
        return this.entity.remove(this);
    }

    protected log(...args: any[]) {
        console.log(`[${this.ecsName}] [log]`, ...args);
    }
    protected warn(...args: any[]) {
        console.warn(`[${this.ecsName}] [warn]`, ...args);
    }
    protected error(...args: any[]) {
        console.error(`[${this.ecsName}] [error]`, ...args);
    }
}
