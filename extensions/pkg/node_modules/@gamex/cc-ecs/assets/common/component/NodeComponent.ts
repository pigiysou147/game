import { Quat, Rect, size, Size, UITransform, v2, v3, Vec2, Vec3 } from 'cc';
import { EcsComponent } from '../../ecs/EcsComponent';
import { ecsclass } from '../../lib/EcsManager';
import { IEntity } from '../../lib/EcsObject';

// export interface INodeReadonly {
//     readonly uuid: number
//     readonly isValid: boolean
//     readonly isStrictValid: boolean
//     readonly ecsName: string
//     readonly allowMultiple: boolean
//     readonly allowRecycling: boolean

//     readonly boundingBox: Readonly<Rect>
//     readonly minX: number
//     readonly minY: number
//     readonly maxX: number
//     readonly maxY: number
// }

interface ILikeSize {
    readonly width: number,
    readonly height: number
}

interface ILikeV2 {
    readonly x: number,
    readonly y: number
}

interface ILikeV3 {
    readonly x: number,
    readonly y: number,
    readonly z: number
}

@ecsclass('EcsNodeComponent')
/**
 * 负责位置、尺寸、缩放、锚点、旋转
 */
export class NodeComponent<T extends IEntity = IEntity> extends EcsComponent<T> {
    static allowRecycling: boolean = true;

    protected onRemove() {
        this.reset();
    }

    public reset() {
        this.$position.set(0, 0, 0);
        this.$scale.set(1, 1, 1);
        this.$anchorPoint.set(0.5, 0.5);
        this.$contentSize.set(0, 0);
        this.$lrot = new Quat();
        this.$euler.set(0, 0, 0);
    }

    // 坐标
    protected $position: Vec3 = v3();
    /**坐标 */
    public get position(): Readonly<ILikeV3> {
        return this.$position;
    }
    /**x坐标 */
    public get x(): number {
        return this.$position.x;
    }
    public set x(value: number) {
        this.$position.x = value;
        this.entity?.node?.setPosition(this.$position);
    }
    /**y坐标 */
    public get y(): number {
        return this.$position.y;
    }
    public set y(value: number) {
        this.$position.y = value;
        this.entity?.node?.setPosition(this.$position);
    }
    /**z坐标 */
    public get z(): number {
        return this.$position.z;
    }
    public set z(value: number) {
        this.$position.z = value;
        this.entity?.node?.setPosition(this.$position);
    }

    // 缩放
    protected $scale: Vec3 = v3(1, 1, 1);
    /**缩放 */
    public get scale(): Readonly<ILikeV3> {
        return this.$scale;
    }
    /**缩放x */
    public get scaleX(): number {
        return this.$scale.x;
    }
    public set scaleX(value: number) {
        this.$scale.x = value;
        this.entity?.node?.setScale(this.$scale);
    }
    /**缩放y */
    public get scaleY(): number {
        return this.$scale.y;
    }
    public set scaleY(value: number) {
        this.$scale.y = value;
        this.entity?.node?.setScale(this.$scale);
    }
    /**缩放z */
    public get scaleZ(): number {
        return this.$scale.z;
    }
    public set scaleZ(value: number) {
        this.$scale.z = value;
        this.entity?.node?.setScale(this.$scale);
    }

    // 锚点
    protected $anchorPoint: Vec2 = v2(0.5, 0.5);
    /**锚点 */
    public get anchorPoint(): Readonly<ILikeV2> {
        return this.$anchorPoint;
    }
    /**锚点x */
    public get anchorX(): number {
        return this.$anchorPoint.x;
    }
    public set anchorX(value: number) {
        this.$anchorPoint.x = value;
        this.entity?.node?.getComponent(UITransform)?.setAnchorPoint(this.$anchorPoint);
    }
    /**锚点y */
    public get anchorY(): number {
        return this.$anchorPoint.y;
    }
    public set anchorY(value: number) {
        this.$anchorPoint.y = value;
        this.entity?.node?.getComponent(UITransform)?.setAnchorPoint(this.$anchorPoint);
    }

    // 尺寸
    protected $contentSize: Size = size();
    /**尺寸 */
    public get contentSize(): Readonly<ILikeSize> {
        return this.$contentSize;
    }
    /**宽 */
    public get width(): number {
        return this.$contentSize.width;
    }
    public set width(value: number) {
        this.$contentSize.width = value;
        this.entity?.node?.getComponent(UITransform)?.setContentSize(this.$contentSize);
    }
    /**高 */
    public get height(): number {
        return this.$contentSize.height;
    }
    public set height(value: number) {
        this.$contentSize.height = value;
        this.entity?.node?.getComponent(UITransform)?.setContentSize(this.$contentSize);
    }

    // 旋转四元数
    protected $lrot = new Quat();
    /**本地坐标系下的旋转，用四元数表示 */
    public get rotation(): Readonly<Quat> {
        return this.$lrot;
    }
    public set rotation(val) {
        Quat.copy(this.$lrot, val);
        Quat.toEuler(this.$euler, this.$lrot);
        this.entity?.node?.setRotation(this.$lrot);
    }

    // 旋转欧拉角
    protected $euler: Vec3 = v3();
    /**本地坐标系下的旋转，用欧拉角表示 */
    public get eulerAngles(): Readonly<Vec3> {
        return this.$euler;
    }
    public set eulerAngles(val) {
        Vec3.copy(this.$euler, val);
        Quat.fromEuler(this.$lrot, val.x, val.y, val.z);
        this.entity?.node?.setRotation(this.$lrot);
    }

    /**本地坐标系下的旋转，用欧拉角表示，但是限定在 z 轴上 */
    public get angle(): number {
        return this.$euler.z;
    }
    public set angle(value: number) {
        this.$euler.z = value;
        Quat.fromAngleZ(this.$lrot, value);
        this.entity?.node?.setRotation(this.$lrot);
    }

    private _rect = new Rect();
    /**碰撞盒(不计算旋转) */
    get boundingBox(): Readonly<Rect> {
        this._rect.set(
            this.minX,
            this.minY,
            this.width * Math.abs(this.scaleX),
            this.height * Math.abs(this.scaleY)
        );
        return this._rect;
    }

    /**最小x坐标(不计算旋转) */
    get minX() {
        if (this.scaleX >= 0) {
            return this.x - this.width * this.anchorX * this.scaleX;
        }
        return this.x + this.width * (1 - this.anchorX) * this.scaleX;
    }
    /**最小y坐标(不计算旋转) */
    get minY() {
        if (this.scaleY >= 0) {
            return this.y - this.height * this.anchorY * this.scaleY;
        }
        return this.y + this.height * (1 - this.anchorY) * this.scaleY;
    }
    /**最大x坐标(不计算旋转) */
    get maxX() {
        if (this.scaleX >= 0) {
            return this.x + this.width * (1 - this.anchorX) * this.scaleX;
        }
        return this.x - this.width * this.anchorX * this.scaleX;
    }
    /**最大y坐标(不计算旋转) */
    get maxY() {
        if (this.scaleY >= 0) {
            return this.y + this.height * (1 - this.anchorY) * this.scaleY;
        }
        return this.y - this.height * this.anchorY * this.scaleY;
    }

    public setPosition(x: number, y: number, z: number = this.z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }

    public addPosition(x: number, y: number, z: number = 0) {
        this.x += x;
        this.y += y;
        this.z += z;
        return this;
    }

    public setScale(x: number, y: number, z: number = this.scaleZ) {
        this.scaleX = x;
        this.scaleY = y;
        this.scaleZ = z;
        return this;
    }

    public addScale(x: number, y: number, z: number = 0) {
        this.scaleX += x;
        this.scaleY += y;
        this.scaleZ += z;
        return this;
    }

    public setAngle(angle: number) {
        this.angle = angle;
        return this;
    }

    public addAngle(angle: number) {
        this.angle += angle;
        return this;
    }

    public setContentSize(width: number, height: number) {
        this.width = width;
        this.height = height;
        return this;
    }

    public setAnchorPoints(x: number, y: number) {
        this.anchorX = x;
        this.anchorY = y;
        return this;
    }
}