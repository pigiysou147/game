
interface ICallback {
    (...args: any[]): any
}

let tid = 0;

/**
 * 定时器
 */
export class Timer {
    static step(timer: Timer, dt: number) {
        timer.time += dt;

        if (timer.first) {
            if (timer.time < timer._delay) return true;
            timer.first = false;
            timer.time = 0;
        } else if (timer.time < timer._interval) {
            return true;
        } else {
            timer.time = 0;
        }

        timer.callback.call(timer.target);

        // 执行次数达到上限，则移除
        if (timer._repeat >= 0 && --timer._repeat < 0) {
            return false;
        }

        return true;
    }

    private _id = ++tid;
    public get id() {
        return this._id;
    }

    /**是否执行过 */
    private first = true;
    /**执行计时 */
    private time = 0;

    /**回调函数 */
    private callback: ICallback = null;
    private target: unknown = null;

    /**首次执行的延迟时间 */
    private _delay = 0;

    /**重复执行的间隔时间 */
    private _interval = 0;

    /**重复执行次数(<0为无限次) */
    private _repeat = -1;

    constructor(callback: ICallback, target: unknown = null) {
        this.target = target;
        this.callback = callback;
    }

    /**
     * 首次执行延迟时间
     * @param value 
     * @returns 
     */
    delay(value: number) {
        this._delay = Math.max(0, value);
        return this;
    }

    /**
     * 重复执行间隔时间
     * @param value 
     * @returns 
     */
    interval(value: number) {
        this._interval = Math.max(0, value);
        return this;
    }

    /**
     * 重复执行次数(<0为无限次)
     * - 初始值为-1
     * - 实际执行次数为repeat + 1
     * @param value 
     * @returns 
     */
    repeat(value: number) {
        this._repeat = value;
        return this;
    }
}

/**
 * 创建一个定时器
 */
export function timer(callback: ICallback, target: unknown = null) {
    return new Timer(callback, target);
}

/**
 * 定时器管理器
 */
export class TimerManager {
    private map = new Map<number, Timer>();

    /**
     * 添加定时器
     * @param timer 
     * @returns 
     */
    add(timer: Timer) {
        this.map.set(timer.id, timer);
        return timer.id;
    }

    /**
     * 移除指定的定时器
     * @param id 
     */
    remove(id: number): void
    /**
     * 移除指定的定时器
     * @param timer 
     */
    remove(timer: Timer): void
    remove(timer: number | Timer) {
        if (typeof timer === 'number') {
            this.map.delete(timer);
        } else {
            this.map.delete(timer.id);
        }
    }

    /**
     * 迭代一次
     */
    step(dt: number) {
        this.map.forEach((timer, tid) => {
            // 执行次数达到上限，则移除
            if (Timer.step(timer, dt) === false) {
                this.map.delete(tid);
            }
        })
    }

    get size() {
        return this.map.size;
    }

    /**
     * 清空
     */
    clear() {
        this.map.clear();
    }
}