import { Filter } from '../lib/EcsFilter';
import { EcsBaseSystem, IComponent, IECS, IEntity, IEntityUUID, IFilter, ISystem, ITypeofComponent } from '../lib/EcsObject';
import { TimerManager } from '../lib/EcsTimer';
import { TweenManager } from '../lib/EcsTween';

export class EcsSystem extends EcsBaseSystem implements ISystem {
    static matchEntity(system: EcsSystem, entity: IEntity) {
        system.matchEntity(entity);
    }

    private _ecs: IECS = null;
    /**获取对应的ecs */
    protected get ecs() {
        return this._ecs;
    }
    private set ecs(v) {
        this._ecs = v;
    }

    /**
     * Timer管理器
     * @example
     * const timer = new Timer(() => { consoe.log('timer'); });
     * timer.delay(1);
     * timer.repeat(10);
     * 
     * this.timer.add(timer);
     */
    protected timer = new TimerManager();

    /**
     * Tween管理器
     * @example
     * const tween = new Tween(ECS组件实例);
     * tween.to(1, ...);
     * tween.delay(1);
     * tween.by(1, ...);
     * 
     * this.tween.add(tween);
     */
    protected tween = new TweenManager();

    /**
     * 指定ecs
     */
    constructor(ecs: IECS) {
        super();
        this.ecs = ecs;
    }

    /**添加 */
    protected onAdd() { }

    /**移除 */
    protected onRemove() { }

    /**查询 */
    protected query<T extends IEntity>(filter: IFilter): T[];
    protected query<T extends IComponent>(filter: IFilter, Component: { new(): T }): T[];
    protected query<T>(filter: IFilter, Component?: ITypeofComponent): T[] {
        if (this.matcher === filter) {
            if (Component) {
                return Array.from(this.matchEntities.values()).map((entity) => entity.getComponent(Component)) as T[];
            }
            return Array.from(this.matchEntities.values()) as T[];
        }
        return this.ecs.query(filter, Component) as T[];
    }

    /**查询 */
    protected find<T extends IEntity>(filter: IFilter): T;
    protected find<T extends IComponent>(filter: IFilter, Component: { new(): T }): T;
    protected find<T>(filter: IFilter, Component?: ITypeofComponent): T {
        if (this.matcher === filter) {
            if (Component) {
                return this.matchEntities.values().next().value?.getComponent(Component) as T || null;
            }
            return this.matchEntities.values().next().value as T || null;
        }
        return this.ecs.find(filter, Component) as T;
    }

    /**是否存在 */
    protected exist(filter: IFilter): boolean {
        if (this.matcher === filter) {
            return this.matchEntities.size > 0;
        }
        return this.ecs.exist(filter);
    }

    /**
     * 过滤实体
     * - 配置后才能响应onEntityEnter、onEntityLeave
     */
    protected matcher: IFilter = null;

    /**实体进入系统，会在execute流程最开始调用*/
    protected onEntityEnter(entity: IEntity) { entity; }

    /**实体离开系统，会在execute流程最开始调用*/
    protected onEntityLeave(entity: IEntity) { entity; }

    private matchEntities: Map<IEntityUUID, IEntity> = new Map();
    private matchEntity(entity: IEntity) {
        if (this.matcher) {
            const isInMatch = this.matchEntities.has(entity.uuid);
            const isMatch = Filter.check(entity, this.matcher as Filter);
            if (isMatch) {
                if (!isInMatch) {
                    this.matchEntities.set(entity.uuid, entity);
                    this.onEntityEnter(entity);
                }
            } else {
                if (isInMatch) {
                    this.matchEntities.delete(entity.uuid);
                    this.onEntityLeave(entity);
                }
            }
        } else if (this.matchEntities.size > 0) {
            this.matchEntities.forEach((entity) => {
                this.onEntityLeave(entity);
            });
            this.matchEntities.clear();
        }
    }

    /**
     * 在Move系统之后，Node系统之前运行
     */
    protected execute(dt?: number, ...args: any[]) { dt; args; }
    /**
     * 在Timer、Tween系统之后，Move系统之前运行
     */
    protected beforeExecute(dt?: number, ...args: any[]) { dt; args; }
    /**
     * 在Node系统之后，Render系统之前运行
     */
    protected afterExecute(dt?: number, ...args: any[]) { dt; args; }

    // 由ecs.update驱动
    protected update(dt?: number, ...args: any[]) { dt; args; }
    protected beforeUpdate(dt?: number, ...args: any[]) { dt; args; }
    protected afterUpdate(dt?: number, ...args: any[]) { dt; args; }

    protected log(...args: any[]) {
        console.log(`[${this.ecsName}] [log]`, ...args);
    }
    protected warn(...args: any[]) {
        console.warn(`[${this.ecsName}] [warn]`, ...args);
    }
    protected error(...args: any[]) {
        console.error(`[${this.ecsName}] [error]`, ...args);
    }
}