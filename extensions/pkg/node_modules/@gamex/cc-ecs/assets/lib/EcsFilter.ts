import { ComponentManager, EntityManager, flagManager } from './EcsManager';
import { IComponent, IComponentName, IEntity, IFilter, IFlag, ITypeofComponent } from './EcsObject';

/**
 * 过滤器
 */
export class Filter implements IFilter {
    static check(entity: IEntity, filter: Filter) {
        return filter.pipeline.every(handle => handle(entity));
    }

    static query(entityManager: EntityManager, componentManager: ComponentManager, filter: Filter) {
        let result: IEntity[] = [];
        if (!filter) return result;

        const filterComp = (comp: IComponent) => {
            if (!comp.enabledInHierarchy) return;
            if (result.indexOf(comp.entity) >= 0) return;
            result.push(comp.entity);
        };

        // 优先验证any
        if (filter.anyList.length !== 0) {
            filter.anyList.forEach(comName => {
                componentManager.getComponents(comName)?.forEach(filterComp);
            });
            if (result.length === 0) return result;
        }

        // 其次验证include
        if (result.length === 0 && filter.include) {
            componentManager.getComponents(filter.include)?.forEach(filterComp);
            if (result.length === 0) return result;
        }

        // 还查询不到，获取所有
        if (result.length === 0 && !filter.hasSearch && filter.hasExclude) {
            entityManager.each((entity) => {
                if (!entity.enabled) return;
                result.push(entity);
            });
        }

        // 没有实体
        if (result.length === 0) return result;

        return result.filter(entity => this.check(entity, filter));
    }

    static find(entityManager: EntityManager, componentManager: ComponentManager, filter: Filter) {
        if (!filter) return null;

        // 优先验证any
        if (filter.anyList.length) {
            for (let index = 0, length = filter.anyList.length; index < length; index++) {
                const comName = filter.anyList[index];
                const com = componentManager.getComponents(comName)?.find((comp) => {
                    if (!comp.enabledInHierarchy) return false;
                    return this.check(comp.entity, filter);
                });
                // 只要有任何一个any符合筛选条件，就返回
                if (com) return com.entity;
            }
            return null;
        }

        let result: IEntity[] = [];

        // 其次验证include
        if (filter.include) {
            componentManager.getComponents(filter.include)?.forEach((comp) => {
                if (!comp.enabledInHierarchy) return;
                if (result.indexOf(comp.entity) >= 0) return;
                result.push(comp.entity);
            });
            if (result.length === 0) return null;
        }

        // 获取所有
        if (result.length === 0 && !filter.hasSearch && filter.hasExclude) {
            entityManager.each((entity) => {
                if (!entity.enabled) return;
                result.push(entity);
            });
        }

        if (result.length === 0) return null;

        result = result.filter(entity => this.check(entity, filter));

        return result.length > 0 ? result[0] : null;
    }

    private anyList: IComponentName[] = [];
    private include: IComponentName = '';
    private hasSearch: boolean = false;
    private hasExclude: boolean = false;
    private pipeline: ((entity: IEntity) => boolean)[] = [];

    /**
     * 有这些组件中的任何一个
     */
    any(...Comps: ITypeofComponent[]) {
        this.hasSearch = true;
        if (Comps.length === 0) return this;

        Comps.forEach(Com => {
            if (this.anyList.indexOf(Com.ecsName) >= 0) return;
            this.anyList.push(Com.ecsName);
        });
        return this;
    }
    /**
     * 必须包含所有这些组件
     * 让数量最少的组件作为第一个参数，会获得更好的性能
     */
    all(...Comps: ITypeofComponent[]) {
        this.hasSearch = true;
        if (Comps.length === 0) return this;
        if (!this.include) this.include = Comps[0].ecsName;

        let flag: IFlag = null;
        this.pipeline.push(function all(entity: IEntity) {
            if (!flag) flag = flagManager.getByNames(Comps.map(Com => Com.ecsName));
            return entity.checkFlagAll(flag) && Comps.every(Com => {
                return entity.getAll(Com).some(comp => comp.enabled && comp.isStrictValid);
            });
        });
        return this;
    }
    /**
     * 仅仅只有这些组件
     * 让数量最少的组件作为第一个参数，会获得更好的性能
     */
    only(...Comps: ITypeofComponent[]) {
        this.hasSearch = true;
        if (Comps.length === 0) return this;
        if (!this.include) this.include = Comps[0].ecsName;

        let flag: IFlag = null;
        this.pipeline.push(function only(entity: IEntity) {
            if (!flag) flag = flagManager.getByNames(Comps.map(Com => Com.ecsName));
            return entity.checkFlagOnly(flag) && Comps.every(Com => {
                return entity.getAll(Com).some(comp => comp.enabled && comp.isStrictValid);
            });
        });
        return this;
    }
    /**
     * 不能包含其中的任何一个组件
     */
    exclude(...Comps: ITypeofComponent[]) {
        if (Comps.length === 0) return this;
        this.hasExclude = true;

        let flag: IFlag = null;
        this.pipeline.push(function exclude(entity: IEntity) {
            if (!flag) flag = flagManager.getByNames(Comps.map(Com => Com.ecsName));
            return !entity.checkFlagAny(flag) || Comps.every(Com => {
                return entity.getAll(Com).every(comp => !comp.enabled || !comp.isStrictValid);
            });
        });
        return this;
    }
}